filter {
  if [type] == "sflow" {
    if [message] =~ /CNTR/ {
      mutate {
        add_tag => [ "dropcandidate" ]
      }
    }

    grok {
      match => { "message" => "%{WORD:sample_type},%{IP:sflow_source_ip},%{WORD:in_port:int},%{WORD:out_port:int},%{WORD:source_mac},%{WORD:destination_mac},%{WORD:ether_type},%{NUMBER:in_vlan:int},%{NUMBER:out_vlan:int},%{IP:source_ip},%{IP:destination_ip},%{NUMBER:protocol:int},%{WORD:type_of_service},%{WORD:ttl:int},%{NUMBER:source_port:int},%{NUMBER:destination_port:int},%{DATA:tcp_flags},%{NUMBER:packet_size:int},%{NUMBER:ip_size:int},%{NUMBER:sample_rate:int}" }
    }

    if "_grokparsefailure" in [tags] {
      mutate {
        add_tag => [ "dropcandidate" ]
      }
    }

    mutate {
      add_field => {
        "[source_hostname]" => "%{source_ip}"
        "[destination_hostname]" => "%{destination_ip}"
        "[sflow_source_hostname]" => "%{sflow_source_ip}"
      }
    }

    translate {
      source => "[source_port]"
      target => "[source_service]"
      dictionary_path => "/usr/local/sof-elk/lib/dictionaries/service_int2iana.yaml"
    }

    translate {
      field => "[destination_port]"
      destination => "[destination_service]"
      dictionary_path => "/usr/local/sof-elk/lib/dictionaries/service_int2iana.yaml"
    }

    translate {
      field => "[protocol]"
      destination => "[protocol_name]"
      dictionary_path => "/usr/local/sof-elk/lib/dictionaries/port_proto_int2iana.yaml"
    }

#    translate {
#      field => "[tcp_flags]"
#      destination => "[tcp_flag]"
#      dictionary_path => "/usr/local/sof-elk/lib/dictionaries/tcp_flags_hex2full.yaml"
#    }

    dns {
      reverse => [ "source_hostname" ]
      action => "replace"
    }

    dns {
      reverse => [ "destination_hostname" ]
      action => "replace"
    }

    dns {
      reverse => [ "sflow_source_hostname" ]
      action => "replace"
    }

    mutate {
      add_field => { "ips" => [ "%{sflow_source_ip}" ] }
    }
  }
}
