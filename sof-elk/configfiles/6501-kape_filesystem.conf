# SOF-ELKÂ® Configuration File
# Author: Phil Hagen
# Email: phil@lewestech.com
#
# (C)2021 Lewes Technology Consulting, LLC
#
# This conf file accepts logs from the KAPE forensic tool

filter {
  if [type] == "kape_filesystem" and "json" not in [tags] {
    mutate {
      # create two "timestamp" fields with the MACBs in subfields
      # create a KAPE-specific bit field
      # promote the remaining fields of interest out of the [raw] placeholder
      # remove the [raw] placeholder

      rename => {
        "[raw][LastRecordChange0x10]" => "[stdinfo_ts][lastrecordchange]"
        "[raw][LastModified0x10]" => "[stdinfo_ts][lastmodified]"
        "[raw][LastAccess0x10]" => "[stdinfo_ts][lastaccess]"
        "[raw][Created0x10]" => "[stdinfo_ts][created]"

        "[raw][LastRecordChange0x30]" => "[filename_ts][lastrecordchange]"
        "[raw][LastModified0x30]" => "[filename_ts][lastmodified]"
        "[raw][LastAccess0x30]" => "[filename_ts][lastaccess]"
        "[raw][Created0x30]" => "[filename_ts][created]"

        "[raw][InUse]" => "[kapefileinfo][inuse]"
        "[raw][IsDirectory]" => "[kapefileinfo][isdirectory]"
        "[raw][HasAds]" => "[kapefileinfo][hasads]"
        "[raw][IsAds]" => "[kapefileinfo][isads]"
        "[raw][Timestomped]" => "[kapefileinfo][timestomped]"
        "[raw][Copied]" => "[kapefileinfo][copied]"

        "[raw][SiFlags]" => "siflags"
        "[raw][EntryNumber]" => "entrynumber"
        "[raw][SequenceNumber]" => "sequencenumber"
        "[raw][ParentEntryNumber]" => "parententrynumber"
        "[raw][ParentSequenceNumber]" => "parentsequencenumber"
        "[raw][ParentPath]" => "parentpath"
        "[raw][FileName]" => "filename"
        "[raw][Extension]" => "extension"
        "[raw][FileSize]" => "filesize"
        "[raw][ReferenceCount]" => "referencecount"
        "[raw][ReparseTarget]" => "reparsetarget"
        "[raw][NameType]" => "nametype"
        "[raw][UpdateSequenceNumber]" => "updatesequencenumber"
        "[raw][LogfileSequenceNumber]" => "logfilesequencenumber"
        "[raw][SecurityId]" => "securityid"
        "[raw][ObjectIdFileDroid]" => "objectIdfiledroid"
        "[raw][LoggedUtilStream]" => "loggedutilstream"
        "[raw][ZoneIdContents]" => "zoneidcontents"

        "[raw][Name]" => "filename"
        "[raw][UpdateTimestamp]" => "[stdinfo_ts][updated]"
        "[raw][UpdateReasons]" => "updatereasons"
        "[raw][FileAttributes]" => "fileattributes"
        "[raw][OffsetToData]" => "offsettodata"
        "[raw][SourceFile]" => "sourcefile"
      }
      remove_field => [ "raw" ]
    }

    # if there is no filesize, set it to zero
    if ![filesize] {
      mutate {
        add_field => { "filesize" => 0 }
      }
      # this is needed because add_field always adds a string?!
      mutate {
        convert => [
          "filesize", "integer"
        ]
      }
    }

    # split the updatereasons field to an array
    if [updatereasons] {
      mutate {
        split => { "[updatereasons]" => "|" }
      }
    }

    # split the fileattributes field to an array
    if [fileattributes] {
      mutate {
        split => { "[fileattributes]" => "|" }
      }
    }

    # use the stdinfo LastModified time for @timestamp, if present
    # otherwise, use updated (e.g. with USN Journal records)
    if [stdinfo_ts][lastmodified] {
      date {
        match => [ "[stdinfo_ts][lastmodified]", "ISO8601" ]
      }
    } else {
      date {
        match => [ "[stdinfo_ts][updated]", "ISO8601" ]
      }
    }

    # convert all stdinfo timestamps to date/time types
    date {
      match => [ "[stdinfo_ts][lastrecordchange]", "ISO8601" ]
      target => "[stdinfo_ts][lastrecordchange]"
    }
    date {
      match => [ "[stdinfo_ts][lastmodified]", "ISO8601" ]
      target => "[stdinfo_ts][lastmodified]"
    }
    date {
      match => [ "[stdinfo_ts][lastaccess]", "ISO8601" ]
      target => "[stdinfo_ts][lastaccess]"
    }
    date {
      match => [ "[stdinfo_ts][created]", "ISO8601" ]
      target => "[stdinfo_ts][created]"
    }
    date {
      match => [ "[stdinfo_ts][updated]", "ISO8601" ]
      target => "[stdinfo_ts][updated]"
    }

    # convert all FILENAME timestamps to date/time types
    date {
      match => [ "[filename_ts][lastrecordchange]", "ISO8601" ]
      target => "[filename_ts][lastrecordchange]"
    }
    date {
      match => [ "[filename_ts][lastmodified]", "ISO8601" ]
      target => "[filename_ts][lastmodified]"
    }
    date {
      match => [ "[filename_ts][lastaccess]", "ISO8601" ]
      target => "[filename_ts][lastaccess]"
    }
    date {
      match => [ "[filename_ts][created]", "ISO8601" ]
      target => "[filename_ts][created]"
    }

    # convert SiFlags to true/false array
    if [siflags] {
      ruby {
        path => "/usr/local/sof-elk/supporting-scripts/ntfs_flags_to_array.rb"
        script_params => { "source_field" => "siflags" }
      }
    }
  }
}
