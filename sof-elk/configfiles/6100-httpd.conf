# SOF-ELKÂ® Configuration File
# (C)2023 Lewes Technology Consulting, LLC
#
# This file contains filters, transforms, and enrichments for HTTPD access log messages

filter {
  if [type] == "httpdlog" {
    # this should only occur with syslog-based source records
    if [logsource] {
      mutate {
        add_field => { "path" => "HTTPD log from %{logsource}" }
        # the syslog handler populates this with the syslog-based date. we don't want that, though - we'll replace with the date parsed from the http log entry below
        remove_field => [ "timestamp" ]
      }
    } else if "filebeat" in [tags] {
      mutate {
        add_field => { "path" => "filebeat: %{[host][name]}:%{[log][file][path]}" }
      }
    } else {
      mutate {
        add_field => { "path" => "unknown source" }
      }
    }

    grok {
      patterns_dir => [ "/usr/local/sof-elk/grok-patterns" ]

      match => { "message" =>
        [
          # syslog-based entries, as used on my own servers (HTTP access log pushed via syslog messages)
          "%{SYSLOGTIMESTAMP} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}: %{HOSTNAME:hostname} %{COMBINEDPROXYLOG_CUSTOM}",
          "%{SYSLOGTIMESTAMP} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}: %{HOSTNAME:hostname} %{COMMONPROXYLOG_CUSTOM}",
          "%{SYSLOGTIMESTAMP} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}: %{HOSTNAME:hostname} %{COMBINEDAPACHELOG_CUSTOM}",
          "%{SYSLOGTIMESTAMP} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}: %{HOSTNAME:hostname} %{COMMONAPACHELOG_CUSTOM}",

          # live syslog-based data, partially parsed via the syslog{} input selector
          "%{HOSTNAME:hostname} %{COMBINEDPROXYLOG_CUSTOM}",
          "%{HOSTNAME:hostname} %{COMMONPROXYLOG_CUSTOM}",
          "%{HOSTNAME:hostname} %{COMBINEDAPACHELOG_CUSTOM}",
          "%{HOSTNAME:hostname} %{COMMONAPACHELOG_CUSTOM}",

          # straight-out NCSA combined/common formats.  combined has to go first, since common will match a combined entry as well - and we break on first match
          "%{COMBINEDPROXYLOG_CUSTOM}",
          "%{COMMONPROXYLOG_CUSTOM}",
          "%{COMBINEDAPACHELOG_CUSTOM}",
          "%{COMMONAPACHELOG_CUSTOM}",

          # ssl_access_log format
          "\[%{HTTPDATE:timestamp}\] %{IPORHOST:source_ip} %{WORD:ssl_proto} %{NOTSPACE:ssl_cipher} \"(?:%{WORD:request_method} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" (?:%{NUMBER:destination_bytes}|-)",

          # IIS Logs, with help from http://logz.io/blog/iis-log-analyzer/
          # 2015-12-08 06:41:42 GET /handler/someservice.ashx someData=foobar 80 10.223.22.122 HTTP/1.1 Mozilla/5.0+(Windows+NT+6.1;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/46.0.2490.86+Safari/537.36 1.2.1005047168.1446986881 http://www.logz.io/testing.aspx www.logz.io 200 638 795 0
          "%{TIMESTAMP_ISO8601:timestamp} %{WORD:request_method} %{URIPATH:request} %{NOTSPACE:query_string} %{NUMBER:destination_port} %{IPORHOST:source_ip} HTTP/%{NUMBER:httpversion} %{NOTSPACE:useragent} %{NOTSPACE:cookie} %{NOTSPACE:referrer} %{NOTSPACE:hostname} %{NUMBER:response_code} %{NUMBER:destination_bytes} %{NUMBER:source_bytes} %{NUMBER:response_time}",
          # 2002-05-24 20:18:01 172.224.24.114 - 206.73.118.24 80 GET /Default.htm - 200 7930 248 31 Mozilla/4.0+(compatible;+MSIE+5.01;+Windows+2000+Server) http://64.224.24.114/
          "%{TIMESTAMP_ISO8601:timestamp} %{IPORHOST:source_ip} %{HTTPDUSER:ident} %{IPORHOST:destination_ip} %{NUMBER:destination_port} %{WORD:request_method} %{URIPATH:request} %{NOTSPACE:query_string} %{NUMBER:response_code} %{NUMBER:destination_bytes} %{NUMBER:source_bytes} %{NUMBER:response_time} %{NOTSPACE:useragent} %{NOTSPACE:referrer}",
          # 2020-07-01 00:00:00 10.129.19.12 GET /en/whatever - 443 DOMAIN/user.name 10.129.19.5 Mozilla/5.0+(Windows+NT+10.0;+Win64;+x64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/81.0.4044.113+Safari/537.36 /path/folder 200 0 0 26863
          "%{TIMESTAMP_ISO8601:timestamp} %{IPORHOST:destination_ip} %{WORD:request_method} %{URIPATH:request} %{NOTSPACE:query_string} %{NUMBER:destination_port} %{HTTPDUSER:ident} %{IPORHOST:source_ip} %{NOTSPACE:useragent} %{NOTSPACE:referrer} %{NUMBER:response_code} %{NUMBER:response_sub} %{NUMBER:win_status} %{NUMBER:response_time}",
          "%{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:hostname} %{WORD:request_method} %{URIPATH:request} %{NOTSPACE:query_string} %{NUMBER:destination_port} %{HTTPDUSER:ident} %{IPORHOST:source_ip} %{NOTSPACE:useragent} %{NOTSPACE:cookie} %{NOTSPACE:referrer} %{NOTSPACE:hostname} %{NUMBER:response_code} %{NUMBER:response_sub} %{NUMBER:win_status} %{NUMBER:destination_bytes} %{NUMBER:source_bytes} %{NUMBER:response_time}",
          # 2020-07-01 00:00:00 10.129.19.12 GET /en/whatever - 443 - 10.129.19.5 Mozilla/5.0+(Windows+NT+10.0;+Win64;+x64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/81.0.4044.113+Safari/537.36 200 0 0 26863
          "%{TIMESTAMP_ISO8601:timestamp} %{IPORHOST:destination_ip} %{WORD:request_method} %{URIPATH:request} %{NOTSPACE:query_string} %{NUMBER:destination_port} %{HTTPDUSER:ident} %{IPORHOST:source_ip} %{NOTSPACE:useragent} %{NUMBER:response_code} %{NUMBER:response_sub} %{NUMBER:win_status} %{NUMBER:response_time}",
          # 2022-09-30 23:59:46 10.12.11.17 POST /foo - 443 - 10.12.60.132 Mozilla/5.0+(Windows+NT+10.0;+Win64;+x64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/104.0.5112.102+Safari/537.36 https://url.com/foo.html 200 0 0 125 191.20.28.1
          "%{TIMESTAMP_ISO8601:timestamp} %{IPORHOST:destination_ip} %{WORD:request_method} %{URIPATH:request} %{NOTSPACE:query_string} %{NUMBER:source_port} %{HTTPDUSER:ident} %{IPORHOST:source_ip} %{NOTSPACE:useragent} %{NOTSPACE:referrer} %{NUMBER:response_code} %{NUMBER:response_sub} %{NUMBER:win_status} %{NUMBER:response_time} %{IPORHOST:xff_ip}",

          # Amazon S3 Bucket Access Logs, see https://docs.aws.amazon.com/AmazonS3/latest/userguide/LogFormat.html
          ## Authenticated
          ### 385f9ef91a82f8ca241dbb08d21b781846f4b75b73589dec7a054f8781cef6eb pymresearch [01/May/2021:02:48:36 +0000] 47.185.244.137 arn:aws:iam::305681518678:user/slang KDSEANFQKAKRKSW5 REST.HEAD.BUCKET - "HEAD /pymresearch HTTP/1.1" 200 - - - 64 63 "-" "S3Console/0.4, aws-internal/3 aws-sdk-java/1.11.991 Linux/5.4.109-57.182.amzn2int.x86_64 OpenJDK_64-Bit_Server_VM/25.282-b08 java/1.8.0_282 vendor/Oracle_Corporation cfg/retry-mode/legacy" - sMgzTIbb/D0+TiZ5hji7rysKz0YeU+0nTbPyzqOL9PXXyxB3LOQMEVg4xuVZJLDTsjw1VTaoc3w= SigV4 ECDHE-RSA-AES128-GCM-SHA256 AuthHeader s3.amazonaws.com TLSv1.2
          ## Unauthenticated
          ### 385f9ef91a82f8ca241dbb08d21b781846f4b75b73589dec7a054f8781cef6eb pymresearch [01/May/2021:17:25:22 +0000] 5.62.19.43 - 4D1Q49NMZ4ZJ4RF5 REST.GET.OBJECT PymWrapper.py "GET /PymWrapper.py HTTP/1.1" 404 NoSuchKey 284 - 12 - "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0" - WWFnSBORSUeLgMmrv9KWGXBVPJaNHzw1cDNyLV6Gh1W5XNfCFZ010/cuZ624MLkZkVJPfZlsFe8= - - - pymresearch.s3.amazonaws.com -
          "%{AWSACCOUNTID:bucketowner} %{WORD:bucketname} \[%{HTTPDATE:timestamp}\] %{IPORHOST:source_ip} %{AWSACCOUNTID:arn} %{WORD:s3_request_id} %{NOTSPACE:s3_operation} %{NOTSPACE:request_key} \"(?:%{WORD:request_method} (?:%{URIPATH_CUSTOM:request})?(?:\?%{NOTSPACE:query_string})?(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response_code} %{NOTSPACE:error_code} %{NOTSPACE:destination_bytes} %{NOTSPACE:object_size} %{NOTSPACE:response_time} %{NOTSPACE:turnaround_time} %{QS:referrer} %{QS:useragent} %{NOTSPACE:s3_version_id} %{NOTSPACE:s3_host_id} %{NOTSPACE:s3_signature_version} %{NOTSPACE:ssl_cipher} %{NOTSPACE:authentication_type} %{HOSTNAME:hostname} %{NOTSPACE:ssl_proto}",

          # Amazon Loadbalancer logs, see https://stackoverflow.com/questions/53857164/aws-loadbalancer-logs-from-s3-to-elastic-search (specifically https://stackoverflow.com/a/58077713/1400064)
          # 2022-05-16T23:25:46.364556Z a662bccc7fb194c68959bdc3b895f928 135.125.246.110:59428 10.0.5.167:30410 0.000345 0.000008 0.000015 - - 228 489 "- - - " "-" - -
          # NOTE: %{ELB_REQUEST_LINE} should be used when moving to ECS rather than the manual "(?:%{WORD:request_method} (?:%{WORD:protocol}://)?(?:%{HOSTNAME:hostname}(?::%{POSINT:destination_port:int})?)?(?:%{URIPATH_CUSTOM:request})?(?:\?%{NOTSPACE:query_string})?(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})" grok
          "%{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:elb} %{IPORHOST:source_ip}:%{INT:source_port:int} (?:(%{IPORHOST:backend_ip}:?:%{INT:backend_port:int})|-) %{NUMBER:request_processing_time:float} %{NUMBER:backend_processing_time:float} %{NUMBER:response_processing_time:float} (?:%{INT:elb_status_code:int}|-) (?:%{INT:backend_status_code:int}|-) %{INT:source_bytes:int} %{INT:destination_bytes:int} \"(?:%{WORD:request_method} (?:%{WORD:protocol}://)?(?:%{HOSTNAME:hostname}(?::%{POSINT:destination_port:int})?)?(?:%{URIPATH_CUSTOM:request})?(?:\?%{NOTSPACE:query_string})?(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" (?:%{QS:useragent}) (?:%{NOTSPACE:ssl_cipher}|-) (?:%{NOTSPACE:ssl_proto}|-)"
        ]
      }

      add_tag => [ "parse_done" ]
      tag_on_failure => [ "_gpfail", "fail_ht01" ]
    }

    # if nothing above matched, we might have a corrupt or partial record.  let's try to squeak out whatever fields we can
    if !( "parse_done" in [tags]) {
      grok {
        patterns_dir => [ "/usr/local/sof-elk/grok-patterns" ]

        match => { "message" =>
          [
            # match first few fields from the syslog-based format
            "%{SYSLOGTIMESTAMP} %{SYSLOGHOST} %{SYSLOGPROG}: %{HOSTNAME:hostname} %{IPORHOST:source_ip} %{HTTPDUSER:ident} %{NOTSPACE:username} \[%{HTTPDATE:timestamp}\]",

            # client IP address is first entry in NCSA combined/common formats
            "^%{IPORHOST:source_ip} %{HTTPDUSER:ident} %{NOTSPACE:username} \[%{HTTPDATE:timestamp}\]",

            # first few fields from ssl_access_log format
            "^\[%{HTTPDATE:timestamp}\] %{IPORHOST:source_ip}",

            # find ANY httplog-formatted date string
            "\[%{HTTPDATE:timestamp}\]"
          ]
        }
        
        add_tag => [ "partial_httpd_log", "parse_done" ]
        tag_on_failure => [ "_gpfail", "fail_ht02" ]
      }
    }

    # re-assemble an entire URL if all the components are there
    if [protocol] and [hostname] and [request] {
      if [destination_port] {
        mutate {
          add_field => { "request_url" => "%{protocol}://%{hostname}:%{destination_port}%{request}" }
        }
      } else {
        mutate {
          add_field => { "request_url" => "%{protocol}://%{hostname}%{request}" }
        }
      }

      if [query_string] {
        mutate {
          replace => { "request_url" => "%{request_url}?%{query_string}" }
        }
      }
    }

    if "[timestamp]" {
      date {
        match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z", "YYYY-MM-dd HH:mm:ss", "ISO8601" ]
        remove_field => [ "timestamp" ]
      }
    }

    mutate {
      remove_field => [ "program" ]
    }

    if "parse_done" in [tags] {
      mutate {
        remove_field => [ "message" ]
      }
    }
  }
}
