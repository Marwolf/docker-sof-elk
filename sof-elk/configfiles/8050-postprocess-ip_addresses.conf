# SOF-ELKÂ® Configuration File
# (C)2023 Lewes Technology Consulting, LLC
#
# This file contains transforms and enrichments to be applied in postprocessing

filter {
  if [source_ip] {
    if [source_ip] == "-" {
      mutate {
        replace => { "source_ip" => "0.0.0.0" }
      }
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "[source_ip]"
      target => "[source_geo]"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "[source_ip]"
      target => "[source_geo]"
    }
    mutate {
      add_field => {
        "ips" => [ "%{source_ip}" ]
      }
    }
  }

  if [source_geo][asn] and [source_geo][as_org] {
    mutate {
      add_field => { "[source_geo][asnstr]" => "%{[source_geo][asn]}: %{[source_geo][as_org]}" }
    }
  }

  # generally just for netflow, which sets source_as to 0 on a non-AS-aware exporter
  if [source_geo][asn] and [source_as] == 0 {
    mutate {
      replace => { "source_as" => "%{[source_geo][asn]}" }
    }
    mutate {
      gsub => [ "source_as", "^AS", "" ]
    }
    mutate {
      convert => { "source_as" => "integer" }
    }
  }

  if [destination_ip] {
    if [destination_ip] == "-" {
      mutate {
        replace => { "destination_ip" => "0.0.0.0" }
      }
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "[destination_ip]"
      target => "[destination_geo]"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "[destination_ip]"
      target => "[destination_geo]"
    }
    mutate {
      add_field => {
        "ips" => [ "%{destination_ip}" ]
      }
    }
  }

  if [destination_geo][asn] and [destination_geo][as_org] {
    mutate {
      add_field => { "[destination_geo][asnstr]" => "%{[destination_geo][asn]}: %{[destination_geo][as_org]}" }
    }
  }

  # generally just for netflow, which sets destination_as to 0 on a non-AS-aware exporter
  if [destination_geo][asn] and [destination_as] == 0 {
    mutate {
      replace => { "destination_as" => "%{[destination_geo][asn]}" }
    }
    mutate {
      gsub => [ "destination_as", "^AS", "" ]
    }
    mutate {
      convert => { "destination_as" => "integer" }
    }
  }

  if [answer_ip] {
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "[answer_ip]"
      target => "[answer_geo]"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "[answer_ip]"
      target => "[answer_geo]"
    }
    mutate {
      add_field => {
        "ips" => [ "%{answer_ip}" ]
      }
    }
  }
  if [answer_geo][asn] and [answer_geo][as_org] {
    mutate {
      add_field => { "[answer_geo][asnstr]" => "%{[answer_geo][asn]}: %{[answer_geo][as_org]}" }
    }
  }

  if [client_ip] {
    if [client_ip] == "-" {
      mutate {
        replace => { "client_ip" => "0.0.0.0" }
      }
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "[client_ip]"
      target => "[client_geo]"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "[client_ip]"
      target => "[client_geo]"
    }
    mutate {
      add_field => {
        "ips" => [ "%{client_ip}" ]
      }
    }
  }
  if [client_geo][asn] and [client_geo][as_org] {
    mutate {
      add_field => { "[client_geo][asnstr]" => "%{[client_geo][asn]}: %{[client_geo][as_org]}" }
    }
  }

  if [remote_ip] {
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "[remote_ip]"
      target => "[remote_geo]"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "[remote_ip]"
      target => "[remote_geo]"
    }
    mutate {
      add_field => {
        "ips" => [ "%{remote_ip}" ]
      }
    }
  }
  if [remote_geo][asn] and [remote_geo][as_org] {
    mutate {
      add_field => { "[remote_geo][asnstr]" => "%{[remote_geo][asn]}: %{[remote_geo][as_org]}" }
    }
  }

  if [backend_ip] {
    if [backend_ip] == "-" {
      mutate {
        replace => { "backend_ip" => "0.0.0.0" }
      }
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "[backend_ip]"
      target => "[backend_geo]"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "[backend_ip]"
      target => "[backend_geo]"
    }
    mutate {
      add_field => {
        "ips" => [ "%{backend_ip}" ]
      }
    }
  }

  if [backend_geo][asn] and [backend_geo][as_org] {
    mutate {
      add_field => { "[backend_geo][asnstr]" => "%{[backend_geo][asn]}: %{[backend_geo][as_org]}" }
    }
  }

  if [xff_ip] {
    if [xff_ip] == "-" {
      mutate {
        replace => { "xff_ip" => "0.0.0.0" }
      }
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "[xff_ip]"
      target => "[xff_geo]"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "[xff_ip]"
      target => "[xff_geo]"
    }
    mutate {
      add_field => {
        "ips" => [ "%{xff_ip}" ]
      }
    }
  }

  if [xff_geo][asn] and [xff_geo][as_org] {
    mutate {
      add_field => { "[xff_geo][asnstr]" => "%{[xff_geo][asn]}: %{[xff_geo][as_org]}" }
    }
  }

  # cleanup the duplicative fields if they exist
  mutate {
    remove_field => [ 
      "[source_geo][ip]", 
      "[destination_geo][ip]", 
      "[answer_geo][ip]", 
      "[client_geo][ip]", 
      "[remote_geo][ip]",
      "[backend_geo][ip]",
      "[xff_geo][ip]"
    ]
  }

# Commenting out this logic until we can iterate over the [ips] array.
# At this time, the logstash-filter-cidr plugin does not allow this.
#  if [ips] {
#    cidr {
#      address => %{ips}
#      network => [ "10.0.0.0/8", "172.16.0.0/12", 192.168.0.0/16", "fc00::/7" ]
#      add_tag => [ "privatenet" ]
#    }
#    cidr {
#      address => %{ips}
#      network => [ "169.254.0.0/16", "fe80::/10" ]
#      add_tag => [ "linklocal" ]
#    }
#    cidr {
#      address => %{ips}
#      network => [ "224.0.0.0/4", "ff00::/8" ]
#      add_tag => [ "multicast" ]
#    }
#    cidr {
#      address => %{ips}
#      network => [ "127.0.0.0/8", "::1/128" ]
#      add_tag => [ "loopback" ]
#    }
#  }
}
